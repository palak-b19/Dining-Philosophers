Q2


#include <pthread.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <time.h>

#define Total_Philosophers 5
#define Total_Bowls 2
#define Max_Iterations 1000

pthread_mutex_t forks[Total_Philosophers];
pthread_mutex_t bowls[Total_Bowls];
pthread_cond_t fork_available[Total_Philosophers];
pthread_cond_t bowl_available[Total_Bowls];

int left_fork(int philosopherNumber) { return philosopherNumber; }
int right_fork(int philosopherNumber) { return (philosopherNumber + 1) % Total_Philosophers; }

int bowl_id(int philosopherNumber) { return philosopherNumber % Total_Bowls; }

void eating(int philosopherNumber)
{
    printf("Philosopher %d is eating...\n", philosopherNumber);
    usleep(rand() % 1000000); // Simulate eating for a random time (up to 1 second)
}

void thinking(int philosopherNumber)
{
    printf("Philosopher %d is thinking...\n", philosopherNumber);
    usleep(rand() % 1000000); // Simulate thinking for a random time (up to 1 second)
}

void get_forks(int philosopherNumber)
{
    if (philosopherNumber)
        pthread_mutex_lock(&forks[left_fork(philosopherNumber)]);
    pthread_mutex_lock(&forks[right_fork(philosopherNumber)]);
}

void put_forks(int philosopherNumber)
{
    pthread_mutex_unlock(&forks[left_fork(philosopherNumber)]);
    pthread_mutex_unlock(&forks[right_fork(philosopherNumber)]);
    pthread_cond_signal(&fork_available[left_fork(philosopherNumber)]);
    pthread_cond_signal(&fork_available[right_fork(philosopherNumber)]);
}

int chooseBowl()
{
    int chosenBowl = -1;
    while (chosenBowl == -1)
    {
        for (int i = 0; i < Total_Bowls; ++i)
        {
            if (pthread_mutex_trylock(&bowls[i]) == 0)
            {
                chosenBowl = i;
                break;
            }
        }
        if (chosenBowl == -1)
        {
            pthread_cond_wait(&bowl_available[0], &forks[left_fork(0)]);
        }
    }
    return chosenBowl;
}

void *philosopher(void *args)
{
    int philosopherNumber = *((int *)args);
    free(args);

    int iterations = 0;
    while (iterations < Max_Iterations)
    {
        thinking(philosopherNumber);

        get_forks(philosopherNumber);

        int CHOSEN = chooseBowl();

        eating(philosopherNumber);

        put_forks(philosopherNumber);
        pthread_mutex_unlock(&bowls[CHOSEN]);
        pthread_cond_signal(&bowl_available[CHOSEN]);

        iterations++;
    }

    pthread_exit(NULL);
}

int main()
{
    // Seed for random number generation
    srand(time(NULL));

    // Initialize mutexes and condition variables for forks
    for (int i = 0; i < Total_Philosophers; ++i)
    {
        if (pthread_mutex_init(&forks[i], NULL) != 0)
        {
            perror("Error initializing fork mutex");
            exit(EXIT_FAILURE);
        }

        if (pthread_cond_init(&fork_available[i], NULL) != 0)
        {
            perror("Error initializing fork condition variable");
            exit(EXIT_FAILURE);
        }
    }

    // Initialize mutexes and condition variables for bowls
    for (int i = 0; i < Total_Bowls; ++i)
    {
        if (pthread_mutex_init(&bowls[i], NULL) != 0)
        {
            perror("Error initializing bowl mutex");
            exit(EXIT_FAILURE);
        }

        if (pthread_cond_init(&bowl_available[i], NULL) != 0)
        {
            perror("Error initializing bowl condition variable");
            exit(EXIT_FAILURE);
        }
    }

    // Create philosopher threads
    pthread_t philosophers[Total_Philosophers];
    for (int i = 0; i < Total_Philosophers; ++i)
    {
        int *philoNumber = (int *)malloc(sizeof(int));
        if (philoNumber == NULL)
        {
            perror("Error allocating memory for philosopher number");
            exit(EXIT_FAILURE);
        }

        *philoNumber = i;
        if (pthread_create(&philosophers[i], NULL, philosopher, (void *)philoNumber) != 0)
        {
            perror("Error creating philosopher thread");
            exit(EXIT_FAILURE);
        }
    }

    // Wait for philosopher threads to finish
    for (int i = 0; i < Total_Philosophers; ++i)
    {
        if (pthread_join(philosophers[i], NULL) != 0)
        {
            perror("Error joining philosopher thread");
            exit(EXIT_FAILURE);
        }
    }

    // Destroy mutexes and condition variables for forks
    for (int i = 0; i < Total_Philosophers; ++i)
    {
        if (pthread_mutex_destroy(&forks[i]) != 0)
        {
            perror("Error destroying fork mutex");
            exit(EXIT_FAILURE);
        }

        if (pthread_cond_destroy(&fork_available[i]) != 0)
        {
            perror("Error destroying fork condition variable");
            exit(EXIT_FAILURE);
        }
    }

    // Destroy mutexes and condition variables for bowls
    for (int i = 0; i < Total_Bowls; ++i)
    {
        if (pthread_mutex_destroy(&bowls[i]) != 0)
        {
            perror("Error destroying bowl mutex");
            exit(EXIT_FAILURE);
        }

        if (pthread_cond_destroy(&bowl_available[i]) != 0)
        {
            perror("Error destroying bowl condition variable");
            exit(EXIT_FAILURE);
        }
    }

    return 0;
}
